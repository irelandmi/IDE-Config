{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

"testsnippet": {
	"scope": "python",
	"prefix": "create function",
	"body": ["def $1():",
			"\tpass"
	],
	"description": "description"
	},
"Singleton Pattern": {
    "prefix": "singleton",
    "body": [
      "class Singleton: ",
      "    _instance = None",
      "",
      "    def __new__(cls, *args, **kwargs):",
      "        if not cls._instance:",
      "            cls._instance = super(Singleton, cls).__new__(cls)",
      "        return cls._instance"
    ],
    "description": "Singleton Design Pattern"
  },
"Factory Method Pattern": {
    "prefix": "create factory",
    "body": [
      "class Product:",
      "    def operation(self):",
      "        pass",
      "",
      "class ConcreteProductA(Product):",
      "    def operation(self):",
      "        return \"Result of ConcreteProductA\"",
      "",
      "class ConcreteProductB(Product):",
      "    def operation(self):",
      "        return \"Result of ConcreteProductB\"",
      "",
      "class Creator:",
      "    def factory_method(self):",
      "        pass",
      "",
      "    def some_operation(self):",
      "        product = self.factory_method()",
      "        return f\"Creator: Working with {product.operation()}\"",
      "",
      "class ConcreteCreatorA(Creator):",
      "    def factory_method(self):",
      "        return ConcreteProductA()",
      "",
      "class ConcreteCreatorB(Creator):",
      "    def factory_method(self):",
      "        return ConcreteProductB()",
      "",
      "# Usage",
      "creator = ConcreteCreatorA()",
      "result = creator.some_operation()"
    ],
    "description": "Factory Method Design Pattern"
  },
  "Observer Pattern": {
    "prefix": "create observer",
    "body": [
      "class Observer:",
      "    def update(self, subject):",
      "        pass",
      "",
      "class ConcreteObserverA(Observer):",
      "    def update(self, subject):",
      "        if subject.state < 3:",
      "            print(\"ConcreteObserverA: Reacted to the event\")",
      "",
      "class Subject:",
      "    _observers = []",
      "",
      "    def attach(self, observer):",
      "        self._observers.append(observer)",
      "",
      "    def detach(self, observer):",
      "        self._observers.remove(observer)",
      "",
      "    def notify(self):",
      "        for observer in self._observers:",
      "            observer.update(self)",
      "",
      "    def some_business_logic(self):",
      "        self.state = 1",
      "        print(\"Subject: State has changed\")",
      "        self.notify()",
      "",
      "# Usage",
      "subject = Subject()",
      "observer_a = ConcreteObserverA()",
      "subject.attach(observer_a)",
      "subject.some_business_logic()"
    ],
    "description": "Observer Design Pattern"
  },
  "Strategy Pattern": {
    "prefix": "create strategy",
    "body": [
      "class Strategy:",
      "    def do_algorithm(self, data):",
      "        pass",
      "",
      "class ConcreteStrategyA(Strategy):",
      "    def do_algorithm(self, data):",
      "        return sorted(data)",
      "",
      "class ConcreteStrategyB(Strategy):",
      "    def do_algorithm(self, data):",
      "        return sorted(data, reverse=True)",
      "",
      "class Context:",
      "    def __init__(self, strategy: Strategy):",
      "        self._strategy = strategy",
      "",
      "    def set_strategy(self, strategy: Strategy):",
      "        self._strategy = strategy",
      "",
      "    def execute_strategy(self, data):",
      "        return self._strategy.do_algorithm(data)",
      "",
      "# Usage",
      "context = Context(ConcreteStrategyA())",
      "result = context.execute_strategy([1, 3, 2, 5, 4])",
      "print(result)"
    ],
    "description": "Strategy Design Pattern"
  },
  "Decorator Pattern": {
    "prefix": "create decorator",
    "body": [
      "def decorator(func):",
      "    def wrapper(*args, **kwargs):",
      "        print(\"Function is being called\")",
      "        return func(*args, **kwargs)",
      "    return wrapper",
      "",
      "@decorator",
      "def say_hello(name):",
      "    return f\"Hello, {name}!\"",
      "",
      "# Usage",
      "result = say_hello(\"Alice\")",
      "print(result)"
    ],
    "description": "Decorator Design Pattern"
  },
  "Command Pattern": {
    "prefix": "create command",
    "body": [
      "class Command:",
      "    def execute(self):",
      "        pass",
      "",
      "class Light:",
      "    def on(self):",
      "        print(\"Light is ON\")",
      "",
      "    def off(self):",
      "        print(\"Light is OFF\")",
      "",
      "class LightOnCommand(Command):",
      "    def __init__(self, light):",
      "        self.light = light",
      "",
      "    def execute(self):",
      "        self.light.on()",
      "",
      "class LightOffCommand(Command):",
      "    def __init__(self, light):",
      "        self.light = light",
      "",
      "    def execute(self):",
      "        self.light.off()",
      "",
      "class RemoteControl:",
      "    def __init__(self):",
      "        self._commands = {}",
      "",
      "    def set_command(self, name, command):",
      "        self._commands[name] = command",
      "",
      "    def press_button(self, name):",
      "        if name in self._commands:",
      "            self._commands[name].execute()",
      "",
      "# Usage",
      "light = Light()",
      "remote = RemoteControl()",
      "remote.set_command(\"on\", LightOnCommand(light))",
      "remote.set_command(\"off\", LightOffCommand(light))",
      "remote.press_button(\"on\")"
    ],
    "description": "Command Design Pattern"
  },
  "Proxy Pattern": {
    "prefix": "create proxy",
    "body": [
      "class Subject:",
      "    def request(self):",
      "        pass",
      "",
      "class RealSubject(Subject):",
      "    def request(self):",
      "        print(\"RealSubject: Handling request\")",
      "",
      "class Proxy(Subject):",
      "    def __init__(self, real_subject: RealSubject):",
      "        self._real_subject = real_subject",
      "",
      "    def request(self):",
      "        print(\"Proxy: Checking access prior to firing a real request.\")",
      "        self._real_subject.request()",
      "",
      "# Usage",
      "real_subject = RealSubject()",
      "proxy = Proxy(real_subject)",
      "proxy.request()"
    ],
    "description": "Proxy Design Pattern"
  },
  "Builder Pattern": {
    "prefix": "create builder",
    "body": [
      "class Product:",
      "    def __init__(self):",
      "        self.parts = []",
      "",
      "    def add(self, part):",
      "        self.parts.append(part)",
      "",
      "    def list_parts(self):",
      "        return ', '.join(self.parts)",
      "",
      "class Builder:",
      "    def produce_part_a(self):",
      "        pass",
      "",
      "    def produce_part_b(self):",
      "        pass",
      "",
      "class ConcreteBuilder(Builder):",
      "    def __init__(self):",
      "        self.product = Product()",
      "",
      "    def produce_part_a(self):",
      "        self.product.add(\"PartA\")",
      "",
      "    def produce_part_b(self):",
      "        self.product.add(\"PartB\")",
      "",
      "    def get_product(self):",
      "        return self.product",
      "",
      "class Director:",
      "    def __init__(self, builder):",
      "        self._builder = builder",
      "",
      "    def build_minimal_viable_product(self):",
      "        self._builder.produce_part_a()",
      "",
      "    def build_full_featured_product(self):",
      "        self._builder.produce_part_a()",
      "        self._builder.produce_part_b()",
      "",
      "# Usage",
      "builder = ConcreteBuilder()",
      "director = Director(builder)",
      "director.build_full_featured_product()",
      "product = builder.get_product()",
      "print(product.list_parts())"
    ],
    "description": "Builder Design Pattern"
  },
  "Adapter Pattern": {
    "prefix": "create adapter",
    "body": [
      "class Target:",
      "    def request(self):",
      "        return \"Target: The default target's behavior.\"",
      "",
      "class Adaptee:",
      "    def specific_request(self):",
      "        return \"Adaptee: A different behavior.\"",
      "",
      "class Adapter(Target):",
      "    def __init__(self, adaptee):",
      "        self._adaptee = adaptee",
      "",
      "    def request(self):",
      "        return f\"Adapter: {self._adaptee.specific_request()}\"",
      "",
      "# Usage",
      "adaptee = Adaptee()",
      "adapter = Adapter(adaptee)",
      "print(adapter.request())"
    ],
    "description": "Adapter Design Pattern"
  }
}